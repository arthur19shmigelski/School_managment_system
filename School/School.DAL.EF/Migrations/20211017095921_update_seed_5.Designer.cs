// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using School.DAL.EF.Contexts;

namespace School.DAL.EF.Migrations
{
    [DbContext(typeof(AcademyContext))]
    [Migration("20211017095921_update_seed_5")]
    partial class update_seed_5
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.8")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("School.Core.Models.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DurationWeeks")
                        .HasColumnType("int");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<string>("Program")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TopicId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TopicId");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = ".NET разработчик создаёт приложения, игры на языке программирования C# на платформе .NET, которую поддерживает Microsoft.	Курс поможет с нуля освоить востребованную специальность .NET-разработчика",
                            DurationWeeks = 8,
                            Level = 0,
                            Price = 1350.0,
                            Program = "1. Вводное. Установка окружения(C#, Visual Studio). Запуск первой программы Console Application.\n2. Типы данных. Переменные. Операторы.\n3. Операторы if/switch.\n4. Циклы.\n5. И многое другое...",
                            Title = "C#",
                            TopicId = 1
                        },
                        new
                        {
                            Id = 2,
                            Description = "Курс поможет с нуля освоить востребованную специальность Java-разработчика. 	Программа построена таким образом, что вы не просто познакомитесь с основами Java и объектно-ориентированным программированием на нем, 	а научитесь разбираться в типах данных, использовать алгоритмы и коллекции Java. ",
                            DurationWeeks = 8,
                            Level = 0,
                            Price = 1420.0,
                            Program = "1. Вводное. Установка окружения(Java, Intellij IDEA). Запуск первой программы.\n2. Типы данных. Переменные. Операторы.\n3. Операторы if/switch.\n4. Циклы.\n5. И многое другое...",
                            Title = "Java",
                            TopicId = 2
                        },
                        new
                        {
                            Id = 3,
                            Description = "Современный дизайн — обширная область, которая тесно соприкасается с ИТ-сферой, а UX/UI-дизайнеры, веб-дизайнеры и дизайнеры интерфейсов — одновременно и художники, и технически подкованные специалисты, востребованные в индустрии.	 Курс поможет с нуля освоить востребованную специальность Design-разработчика",
                            DurationWeeks = 6,
                            Level = 0,
                            Price = 1250.0,
                            Program = "1. Принципы визуального дизайна.\n2. Особенности UI/UX/web дизайна.\n3. Основы композиции.\n4. Правила работы со шрифтами.\n5. И многое другое...",
                            Title = "Web Design",
                            TopicId = 3
                        },
                        new
                        {
                            Id = 4,
                            Description = "ASP.NET разработчик создаёт приложения и игры на языке программирования C# на платформе .NET, которую поддерживает Microsoft.",
                            DurationWeeks = 10,
                            Level = 1,
                            Price = 1610.0,
                            Program = "1. Основы MVC: -Паттерн MVC, MVC контроллеры, разработка представлений.\n2. Основы WebApi: -Архитектура REST; -Проектирование RESTful сервисов, Self-Hosted приложения\n3. Работа с моделями: -Многослойная архитектура; -Добавление слоя бизнес-логики; -DI и паттерн IoC\n4. Работа с данными: -Понятие ORM, Entity Framework; -Основные подходы к проектированию БД: CodeFirst, DatabaseFirst, ModelFirst\n5. И многое другое...",
                            Title = "Промышленная разработка ПО на ASP.NET",
                            TopicId = 1
                        },
                        new
                        {
                            Id = 5,
                            Description = "Курс подойдет как студентам технических ВУЗов и специалистам, которым интересно освоить новый язык, так и новичкам в программировании. Но для зачисления необходимо будет сдать тесты по логике и английскому языку.",
                            DurationWeeks = 10,
                            Level = 1,
                            Price = 1650.0,
                            Program = "1. Основы Apache Maven.\n2. Инженерные техники при работе с Apache Maven.\n3. Работа с моделями: -Многослойная архитектура; -Добавление слоя бизнес-логики, паттерн DAO; -Практика.\n4. Работа с данными: Основные подходы к проектированию БД, Введение в БД и SQL.\n5. И многое другое...",
                            Title = "Промышленная разработка ПО на Java",
                            TopicId = 2
                        },
                        new
                        {
                            Id = 6,
                            Description = "Этот курс предназначен для тех, кто хочет познакомится поближе с языком JavaScript + языком разметки HTML5 + CCS3.Таким образом, ты станешь Front-end разработчиком с большим уклоном в дизайн.",
                            DurationWeeks = 8,
                            Level = 1,
                            Price = 1440.0,
                            Program = "1. Знакомство с библиотекой React.\n2. Настройка Git и Webpack.\n3. Глубокое изучение JavaScript.\n4. Твоя первая большая курсовая работа в команде (простой суши-магазин).\n5. И многое другое...",
                            Title = "Веб-разработка на языках HTML, CSS и JavaScript ",
                            TopicId = 3
                        },
                        new
                        {
                            Id = 7,
                            Description = "Unity - это современный и мощный игровой движок, позволяющий делать игры любого уровня.	Unity-разработчик создаёт игры и приложения почти под все игровые платформы.",
                            DurationWeeks = 14,
                            Level = 2,
                            Price = 2040.0,
                            Program = "1. Введение в Unity. Hello world с Unity.\n2. Scripts (Cкрипты). Part 1: -Методология; -Игровые объекты и компоненты; -Cлои, ввод данных, теги.\n3. Scripts (Скрипты). Part 2: -Manual: Immediate Mode GUI (IMGUI); -Сопрограммы.\n4. Инструментарий для разработки 2D-игр.\n5. И многое другое...",
                            Title = "Unity",
                            TopicId = 1
                        },
                        new
                        {
                            Id = 8,
                            Description = "В одном супер-курсе мы собрали не только все главные технологии с двух сторон (Front-end и Back-end), которые сегодня активно используются в разработке веб-приложений: HTML, CSS, JavaScript, PHP, SQL; но и изучение основ веб-дизайна, общих принципов клиент-серверной архитектуры веб-приложений, ООП, фреймворков ReactJs и Laravel, системы контроля версий Git и сервиса GitHub.",
                            DurationWeeks = 15,
                            Level = 2,
                            Price = 2570.0,
                            Program = "1. JQuery.\n2. EscmaScript6.\n3. Расширенные возможность JavaScript\n4. Работа с данными: Основные подходы к проектированию БД, Введение в БД и SQL\n5. И многое другое...",
                            Title = "Full-stack developer",
                            TopicId = 2
                        },
                        new
                        {
                            Id = 9,
                            Description = "Этот курс Angular, React, Vue для тех, кто хочет стать программистом и работать в сфере веб-разработки. 2,5 месяца теории и практического опыта.",
                            DurationWeeks = 12,
                            Level = 2,
                            Price = 2300.0,
                            Program = "1. Знакомство с библиотекой React\n2.Знакомство с библиотекой Angular\n3. Знакомство с библиотекой Vue\n4. Твоя первая большая курсовая работа в команде (3 проекта на каждом фрэймворке - магазин доставки цветов)\n5. И многое другое...",
                            Title = "Angular, React, Vue",
                            TopicId = 3
                        },
                        new
                        {
                            Id = 10,
                            Description = "IT-HR — это специалист, деятельность которого объединяет IT-рекрутинг и HR-менеджмент.IT-HR работает с коллективом компании, развивает корпоративную культуру, помогает адаптироваться новым коллегам.Основная задача HR-менеджера — сопровождение сотрудника на протяжении всего времени его работы в компании.",
                            DurationWeeks = 4,
                            Level = 0,
                            Price = 1240.0,
                            Program = "1. Разобраться с основными понятиями и терминами IT-рекрутинга\n2. Освоить технологии и методы подбора персонала\n3. Изучить алгоритмы адаптации новых сотрудников\n4. Узнать, как управлять эффективностью персонала\n5. Ознакомиться с понятиями «HR-бренд компании» и «HR-бренд рекрутера»...",
                            Title = "IT-HR интенсив - для маленьких компаний",
                            TopicId = 4
                        },
                        new
                        {
                            Id = 11,
                            Description = "IT-HR — это специалист, деятельность которого объединяет IT-рекрутинг и HR-менеджмент.IT-HR работает с коллективом компании, развивает корпоративную культуру, помогает адаптироваться новым коллегам.Основная задача HR-менеджера — сопровождение сотрудника на протяжении всего времени его работы в компании.",
                            DurationWeeks = 5,
                            Level = 1,
                            Price = 1570.0,
                            Program = "1. Инструменты анализа\n2. Освоить технологии и методы  двухфакторной теории мотивации Герцберга\n3. Изучить алгоритмы адаптации новых сотрудников\n4. Узнать, как управлять эффективностью персонала\n5. Создание корпоративной культуры и идентификация компании на рынке...",
                            Title = "IT-HR Middle - для средних и крупных компаний",
                            TopicId = 4
                        },
                        new
                        {
                            Id = 12,
                            Description = "IT-HR — это специалист, деятельность которого объединяет IT-рекрутинг и HR-менеджмент.IT-HR работает с коллективом компании, развивает корпоративную культуру, помогает адаптироваться новым коллегам.Основная задача HR-менеджера — сопровождение сотрудника на протяжении всего времени его работы в компании.",
                            DurationWeeks = 8,
                            Level = 2,
                            Price = 2040.0,
                            Program = "1. Разобраться с основными понятиями и терминами IT-рекрутинга;\n2. Совершенствование корпоративной культуры, условий труда;\n3. УАттестация и оценка сотрудников (в том числе – «материальная», то есть определение премиальной части ЗП, оплаты на основе KPI);\n4. частие в оперативном управлении и решение текущих вопросов;\n5. Ознакомиться с понятиями «HR-бренд компании» и «HR-бренд рекрутера»...",
                            Title = "IT-HR интенсив - для крупных организаций, производств...",
                            TopicId = 4
                        });
                });

            modelBuilder.Entity("School.Core.Models.File", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("School.Core.Models.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("TeacherId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("TeacherId");

                    b.ToTable("StudentGroups");
                });

            modelBuilder.Entity("School.Core.Models.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Age")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GroupId")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Age = 22,
                            Email = "Fedorov@gmail.com",
                            FirstName = "Олег",
                            LastName = "Федоров",
                            Phone = "+375296711906",
                            Type = 0
                        },
                        new
                        {
                            Id = 2,
                            Age = 26,
                            Email = "Antonov@gmail.com",
                            FirstName = "Адрей",
                            LastName = "Антонов",
                            Phone = "+375293452992",
                            Type = 2
                        },
                        new
                        {
                            Id = 3,
                            Age = 17,
                            Email = "Petrov@gmail.com",
                            FirstName = "Иван",
                            LastName = "Петров",
                            Phone = "+375443567033",
                            Type = 1
                        },
                        new
                        {
                            Id = 4,
                            Age = 19,
                            Email = "Ivashko@gmail.com",
                            FirstName = "Сергей",
                            LastName = "Ивашко",
                            Phone = "+375444236424",
                            Type = 0
                        },
                        new
                        {
                            Id = 5,
                            Age = 25,
                            Email = "Shmigelski@gmail.com",
                            FirstName = "Артур",
                            LastName = "Шмигельский",
                            Phone = "+375295900865",
                            Type = 0
                        },
                        new
                        {
                            Id = 6,
                            Age = 25,
                            Email = "Sergeenko@yandex.com",
                            FirstName = "Виктор",
                            LastName = "Сергеенко",
                            Phone = "+375446668906",
                            Type = 2
                        },
                        new
                        {
                            Id = 7,
                            Age = 50,
                            Email = "Micinat@gmail.com",
                            FirstName = "Владимир",
                            LastName = "Мицинат",
                            Phone = "+375443525757",
                            Type = 2
                        },
                        new
                        {
                            Id = 8,
                            Age = 46,
                            Email = "Frunze@mail.ru",
                            FirstName = "Анатолий",
                            LastName = "Фрунзе",
                            Phone = "+375448839528",
                            Type = 1
                        },
                        new
                        {
                            Id = 9,
                            Age = 40,
                            Email = "VaneevaPolina@gmail.com",
                            FirstName = "Апполинария",
                            LastName = "Ванеева",
                            Phone = "+375449992359",
                            Type = 2
                        },
                        new
                        {
                            Id = 10,
                            Age = 39,
                            Email = "YakimovMiron@gmail.com",
                            FirstName = "Мирон",
                            LastName = "Якимов",
                            Phone = "+375441010744",
                            Type = 1
                        },
                        new
                        {
                            Id = 11,
                            Age = 22,
                            Email = "MorozNikita@gmail.com",
                            FirstName = "Никита",
                            LastName = "Мороз",
                            Phone = "+375440169910",
                            Type = 1
                        },
                        new
                        {
                            Id = 12,
                            Age = 25,
                            Email = "PonimashVitalik@gmail.com",
                            FirstName = "Виталик",
                            LastName = "Понимаш",
                            Phone = "+375441364123",
                            Type = 0
                        },
                        new
                        {
                            Id = 13,
                            Age = 29,
                            Email = "FistashkaIrina@yandex.by",
                            FirstName = "Ирэн",
                            LastName = "Фисташка",
                            Phone = "+375444444966",
                            Type = 0
                        },
                        new
                        {
                            Id = 14,
                            Age = 20,
                            Email = "Filimonova@gmail.com",
                            FirstName = "Алёна",
                            LastName = "Филимонова",
                            Phone = "+375441534784",
                            Type = 2
                        },
                        new
                        {
                            Id = 15,
                            Age = 25,
                            Email = "EfremovSergey@mail.ru",
                            FirstName = "Сергей",
                            LastName = "Ефремов",
                            Phone = "+375441234543",
                            Type = 0
                        },
                        new
                        {
                            Id = 16,
                            Age = 22,
                            Email = "Russia@gmail.com",
                            FirstName = "Владимир",
                            LastName = "Соловьёв",
                            Phone = "+375291111111",
                            Type = 0
                        },
                        new
                        {
                            Id = 17,
                            Age = 26,
                            Email = "IamMikita@gmail.com",
                            FirstName = "Микита",
                            LastName = "Беляев",
                            Phone = "+375292222345",
                            Type = 2
                        },
                        new
                        {
                            Id = 18,
                            Age = 17,
                            Email = "OrlovIgor1998@gmail.com",
                            FirstName = "Игорь",
                            LastName = "Орлов",
                            Phone = "+375443332435",
                            Type = 1
                        },
                        new
                        {
                            Id = 19,
                            Age = 19,
                            Email = "BaranovAlex@gmail.com",
                            FirstName = "Алексей",
                            LastName = "Баранов",
                            Phone = "+375444443445",
                            Type = 0
                        },
                        new
                        {
                            Id = 20,
                            Age = 25,
                            Email = "Kulikov@gmail.com",
                            FirstName = "Кулич",
                            LastName = "Куликов",
                            Phone = "+375295340090",
                            Type = 0
                        },
                        new
                        {
                            Id = 21,
                            Age = 25,
                            Email = "AlexMax375@yandex.com",
                            FirstName = "Макс",
                            LastName = "Алексеев",
                            Phone = "+375446634312",
                            Type = 2
                        },
                        new
                        {
                            Id = 22,
                            Age = 50,
                            Email = "YakovlevYanik@gmail.com",
                            FirstName = "Ян",
                            LastName = "Яковлев",
                            Phone = "+375447734545",
                            Type = 2
                        },
                        new
                        {
                            Id = 23,
                            Age = 46,
                            Email = "Sorokin998@mail.ru",
                            FirstName = "Митя",
                            LastName = "Сорокин",
                            Phone = "+375448991010",
                            Type = 1
                        },
                        new
                        {
                            Id = 24,
                            Age = 40,
                            Email = "SergeevSerg@gmail.com",
                            FirstName = "Сергей",
                            LastName = "Сергеев",
                            Phone = "+375449345432",
                            Type = 2
                        },
                        new
                        {
                            Id = 25,
                            Age = 39,
                            Email = "RomanovRoman@gmail.com",
                            FirstName = "Роман",
                            LastName = "Романов",
                            Phone = "+375441010134",
                            Type = 1
                        },
                        new
                        {
                            Id = 26,
                            Age = 22,
                            Email = "ZaharovEvdakim@gmail.com",
                            FirstName = "Евдаким",
                            LastName = "Захаров",
                            Phone = "+375440134445",
                            Type = 1
                        },
                        new
                        {
                            Id = 27,
                            Age = 25,
                            Email = "Borisov@gmail.com",
                            FirstName = "Антон",
                            LastName = "Борисов",
                            Phone = "+375442929293",
                            Type = 0
                        },
                        new
                        {
                            Id = 28,
                            Age = 29,
                            Email = "KingSize@yandex.by",
                            FirstName = "Аристарх",
                            LastName = "Королёв",
                            Phone = "+375444423342",
                            Type = 0
                        },
                        new
                        {
                            Id = 29,
                            Age = 33,
                            Email = "Ponomar@gmail.com",
                            FirstName = "Арсений",
                            LastName = "Пономарёв",
                            Phone = "+375441230909",
                            Type = 2
                        },
                        new
                        {
                            Id = 30,
                            Age = 20,
                            Email = "GriwaArtem@mail.ru",
                            FirstName = "Артём",
                            LastName = "Григорьев",
                            Phone = "+375449998877",
                            Type = 0
                        });
                });

            modelBuilder.Entity("School.Core.Models.StudentRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ReadyToStartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentRequests");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Comments = "Хочу учиться на C# (basic) ",
                            CourseId = 1,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReadyToStartDate = new DateTime(2021, 8, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0,
                            StudentId = 1
                        },
                        new
                        {
                            Id = 2,
                            Comments = "Хочу учиться на C# (basic)",
                            CourseId = 1,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReadyToStartDate = new DateTime(2021, 7, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0,
                            StudentId = 2
                        },
                        new
                        {
                            Id = 3,
                            Comments = "Хочу учиться на Java (basic)",
                            CourseId = 2,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReadyToStartDate = new DateTime(2021, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0,
                            StudentId = 3
                        },
                        new
                        {
                            Id = 4,
                            Comments = "Хочу учиться на Java (basic)",
                            CourseId = 2,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReadyToStartDate = new DateTime(2021, 7, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0,
                            StudentId = 4
                        },
                        new
                        {
                            Id = 5,
                            Comments = "Хочу учиться на Design (basic)",
                            CourseId = 3,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReadyToStartDate = new DateTime(2021, 9, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0,
                            StudentId = 5
                        },
                        new
                        {
                            Id = 6,
                            Comments = "Хочу учиться на Design (basic)",
                            CourseId = 3,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReadyToStartDate = new DateTime(2021, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0,
                            StudentId = 6
                        },
                        new
                        {
                            Id = 7,
                            Comments = "Хочу учиться на C# (средний)",
                            CourseId = 4,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReadyToStartDate = new DateTime(2021, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0,
                            StudentId = 7
                        },
                        new
                        {
                            Id = 8,
                            Comments = "Хочу учиться на С# (средний)",
                            CourseId = 4,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReadyToStartDate = new DateTime(2021, 8, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0,
                            StudentId = 8
                        },
                        new
                        {
                            Id = 9,
                            Comments = "Хочу учиться на Java (средний)",
                            CourseId = 5,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReadyToStartDate = new DateTime(2021, 9, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0,
                            StudentId = 9
                        },
                        new
                        {
                            Id = 10,
                            Comments = "Хочу учиться на Java (средний)",
                            CourseId = 5,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReadyToStartDate = new DateTime(2021, 7, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0,
                            StudentId = 10
                        });
                });

            modelBuilder.Entity("School.Core.Models.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Age")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("FileId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IdFile")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkToProfile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Photo")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.ToTable("Teachers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Age = 30,
                            Bio = "Меня зовут Вадим Коротков. Я full-stack developer. Я знаю много языков программирования и frameworks",
                            Email = "Korotkov@mail.ru",
                            FirstName = "Вадим",
                            LastName = "Коротков",
                            LinkToProfile = "https://www.linkedin.com/feed/Korotkov",
                            Phone = "+375291656733"
                        },
                        new
                        {
                            Id = 2,
                            Age = 32,
                            Bio = "Меня зовут Сергей Громов. Я back-end developer на .Net Framework + Java (JS).",
                            Email = "Gromov@yandex.ru",
                            FirstName = "Сергей",
                            LastName = "Громов",
                            LinkToProfile = "https://www.linkedin.com/feed/Gromov",
                            Phone = "+375292593534"
                        },
                        new
                        {
                            Id = 3,
                            Age = 36,
                            Bio = "Меня зовут Андрей Камилов. Я front-end developer, знаю некоторые современные frameworks (Angular, Vue, React)",
                            Email = "Kamilov@mail.ru",
                            FirstName = "Андрей",
                            LastName = "Камилов",
                            LinkToProfile = "https://www.linkedin.com/feed/Kamilov",
                            Phone = "+375293334567"
                        },
                        new
                        {
                            Id = 4,
                            Age = 34,
                            Bio = "Меня зовут Marina Kuzmina. Я учитель по направлению",
                            Email = "Kuzmina@yandex.ru",
                            FirstName = "Марина",
                            LastName = "Кузьмина",
                            LinkToProfile = "https://www.linkedin.com/feed/Kuzmina",
                            Phone = "+375296561723"
                        },
                        new
                        {
                            Id = 5,
                            Age = 31,
                            Bio = "Меня зовут Владимир Воробей. Я .Net developer со стажем 3",
                            Email = "Vorobei@gmail.com",
                            FirstName = "Владимир",
                            LastName = "Воробей",
                            LinkToProfile = "https://www.linkedin.com/feed/Vorobei",
                            Phone = "+375290989093"
                        },
                        new
                        {
                            Id = 6,
                            Age = 32,
                            Bio = "Меня зовут Аристарх. Попытаюсь объяснить тебе о .Net",
                            Email = "KuzNica@gmail.com",
                            FirstName = "Аристарх",
                            LastName = "Кузнецов",
                            LinkToProfile = "https://www.linkedin.com/feed/Kuznecov",
                            Phone = "+375290984628"
                        },
                        new
                        {
                            Id = 7,
                            Age = 45,
                            Bio = "Я Анисий Виноградов. Есть практический опыт на Java, JS, примерно 8 лет.",
                            Email = "AnisVinograd@yandex.ru",
                            FirstName = "Анисий",
                            LastName = "Виноградов",
                            LinkToProfile = "https://www.linkedin.com/feed/Vinogradov",
                            Phone = "+375298762334"
                        },
                        new
                        {
                            Id = 8,
                            Age = 43,
                            Bio = "Меня зовут Аннатолий. Я front-end developer, знаю некоторые современные frameworks (Angular, Vue, React)",
                            Email = "Kamilov@yandex.ru",
                            FirstName = "Аннатолий",
                            LastName = "Голубев",
                            LinkToProfile = "https://www.linkedin.com/feed/Golubev",
                            Phone = "+375291324354"
                        },
                        new
                        {
                            Id = 9,
                            Age = 22,
                            Bio = "My name is Arkadiy Gusev. I am a Design teacher",
                            Email = "ArkadiyGusev@yandex.ru",
                            FirstName = "Аркадий",
                            LastName = "Гусев",
                            LinkToProfile = "https://www.linkedin.com/feed/Gusev",
                            Phone = "+375294567890"
                        },
                        new
                        {
                            Id = 10,
                            Age = 49,
                            Bio = "My name is Lazarev Hasbik. I am a C# language teacher",
                            Email = "LazarKiller@yandex.ru",
                            FirstName = "Хасбик",
                            LastName = "Лазарев",
                            LinkToProfile = "https://www.linkedin.com/feed/Lazarev",
                            Phone = "+375296263434"
                        });
                });

            modelBuilder.Entity("School.Core.Models.Topic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Topics");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "	C# (си шарп) – объектно-ориентированный язык программирования, разработанный компанией Microsoft. Прямой интерес такой крупной корпорации к языку гарантирует, что он продолжит развиваться и находить применение в различных отраслях.\n	C Sharp впитал лучшие качества, а также унаследовал особенности синтаксиса Java и C++. Применяется язык для веб-разработки, создания настольных и мобильных приложений. Если вы записались на курс по C# в Минске для того, чтобы научиться создавать web-проекты, то в дальнейшем вам необходимо освоить инструментарий .NET.",
                            Title = ".Net"
                        },
                        new
                        {
                            Id = 2,
                            Description = "	Язык программирования Java находится в числе лидеров во многих рейтингах: TIOBE – на основе подсчёта результатов поисковых запросов, PYPL – по анализу популярности в поисковике Google, IEEE – по комплексу показателей, таких как упоминание в проектах, статьях, вакансиях и других. Такая популярность обусловлена практически безграничными его возможностями и областями применения.\n	Java не зависит от определённой платформы, его называют безопасным, портативным, высокопроизводительным и динамичным языком.",
                            Title = "Java"
                        },
                        new
                        {
                            Id = 3,
                            Description = "	UI/UX и web-дизайн ориентирован на создание внешне привлекательных, удобных в использовании и функциональных пользовательских интерфейсов. Чтобы достичь успеха в этой сфере, необходимо обладать художественным вкусом, быть внимательным к деталям, понимать принципы компьютерной графики и визуального дизайна, уметь работать с инструментами (например, Adobe Photoshop, Adobe Illustrator, Sketch, Figma).",
                            Title = "Design"
                        },
                        new
                        {
                            Id = 4,
                            Description = "	Зачастую можно услышать вопрос, что такое HR-менеджер, как переводится и чем занимается специалист. Если посмотреть должностную инструкцию, становится понятно, что он разрабатывает систему управления персоналом, расставляет приоритеты, развивает сотрудников, прорисовывает цели для них. Помимо этого HR мотивирует, оценивает и ищет нужных специалистов.	\n С помощью данного направления вы уверитесь в значимости HR-менеджера в IT-компании и узнаете обо всех тонкостях профессии как в теории, так и на практике",
                            Title = "HR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("School.Core.Models.Course", b =>
                {
                    b.HasOne("School.Core.Models.Topic", "Topic")
                        .WithMany("Courses")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("School.Core.Models.Group", b =>
                {
                    b.HasOne("School.Core.Models.Course", "Course")
                        .WithMany("Groups")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("School.Core.Models.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId");

                    b.Navigation("Course");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("School.Core.Models.Student", b =>
                {
                    b.HasOne("School.Core.Models.Group", "Group")
                        .WithMany("Students")
                        .HasForeignKey("GroupId");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("School.Core.Models.StudentRequest", b =>
                {
                    b.HasOne("School.Core.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("School.Core.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("School.Core.Models.Teacher", b =>
                {
                    b.HasOne("School.Core.Models.File", "File")
                        .WithMany()
                        .HasForeignKey("FileId");

                    b.Navigation("File");
                });

            modelBuilder.Entity("School.Core.Models.Topic", b =>
                {
                    b.HasOne("School.Core.Models.Topic", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("School.Core.Models.Course", b =>
                {
                    b.Navigation("Groups");
                });

            modelBuilder.Entity("School.Core.Models.Group", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("School.Core.Models.Topic", b =>
                {
                    b.Navigation("Courses");
                });
#pragma warning restore 612, 618
        }
    }
}
